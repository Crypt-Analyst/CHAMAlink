from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, make_response
from flask_login import login_required, current_user
from app.models.chama import Chama, ChamaMember, Contribution, Receipt
from app.models.user import User
from app import db
from datetime import datetime
import io
import csv
import uuid

# Optional PDF generation imports - graceful fallback if not available
try:
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False

receipts_bp = Blueprint('receipts', __name__)

@receipts_bp.route('/receipt/<int:receipt_id>')
@login_required
def view_receipt(receipt_id):
    """View a specific receipt"""
    receipt = Receipt.query.get_or_404(receipt_id)
    
    # Check if user has access to this receipt
    if receipt.user_id != current_user.id:
        member = ChamaMember.query.filter_by(
            user_id=current_user.id,
            chama_id=receipt.chama_id
        ).first()
        
        if not member or member.role not in ['admin', 'treasurer']:
            flash('You do not have permission to view this receipt.', 'error')
            return redirect(url_for('main.dashboard'))
    
    return render_template('receipts/view.html', receipt=receipt)

@receipts_bp.route('/receipt/<int:receipt_id>/download')
@login_required
def download_receipt(receipt_id):
    """Download receipt as PDF"""
    if not PDF_AVAILABLE:
        flash('PDF generation is temporarily unavailable. Please contact support.', 'error')
        return redirect(url_for('receipts.view_receipt', receipt_id=receipt_id))
    
    receipt = Receipt.query.get_or_404(receipt_id)
    
    # Check if user has access to this receipt
    if receipt.user_id != current_user.id:
        member = ChamaMember.query.filter_by(
            user_id=current_user.id,
            chama_id=receipt.chama_id
        ).first()
        
        if not member or member.role not in ['admin', 'treasurer']:
            flash('You do not have permission to download this receipt.', 'error')
            return redirect(url_for('main.dashboard'))
    
    # Generate PDF
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []
    
    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER
    )
    story.append(Paragraph("PAYMENT RECEIPT", title_style))
    story.append(Spacer(1, 20))
    
    # Receipt details
    receipt_data = [
        ['Receipt No:', receipt.receipt_number],
        ['Date:', receipt.generated_at.strftime('%Y-%m-%d %H:%M')],
        ['Chama:', receipt.chama.name],
        ['Member:', receipt.user.full_name],
        ['Payment Type:', receipt.payment_type.title()],
        ['Amount:', f'KES {receipt.amount:,.2f}'],
        ['Status:', receipt.status.title()],
    ]
    
    if receipt.transaction_id:
        receipt_data.append(['Transaction ID:', receipt.transaction_id])
    
    if receipt.notes:
        receipt_data.append(['Notes:', receipt.notes])
    
    receipt_table = Table(receipt_data, colWidths=[2*inch, 4*inch])
    receipt_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.grey),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 12),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('BACKGROUND', (1, 0), (1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(receipt_table)
    story.append(Spacer(1, 30))
    
    # Footer
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=10,
        alignment=TA_CENTER
    )
    story.append(Paragraph("This is an official receipt generated by ChamaLink", footer_style))
    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M')}", footer_style))
    
    doc.build(story)
    buffer.seek(0)
    
    response = make_response(buffer.getvalue())
    response.headers['Content-Type'] = 'application/pdf'
    response.headers['Content-Disposition'] = f'attachment; filename=receipt_{receipt.receipt_number}.pdf'
    
    return response

@receipts_bp.route('/chama/<int:chama_id>/receipts')
@login_required
def chama_receipts(chama_id):
    """View all receipts for a chama"""
    chama = Chama.query.get_or_404(chama_id)
    
    # Check if user is a member
    member = ChamaMember.query.filter_by(
        user_id=current_user.id,
        chama_id=chama_id
    ).first()
    
    if not member:
        flash('You are not a member of this chama.', 'error')
        return redirect(url_for('main.dashboard'))
    
    # Get receipts based on role
    if member.role in ['admin', 'treasurer']:
        receipts = Receipt.query.filter_by(chama_id=chama_id).order_by(Receipt.generated_at.desc()).all()
    else:
        receipts = Receipt.query.filter_by(
            chama_id=chama_id,
            user_id=current_user.id
        ).order_by(Receipt.generated_at.desc()).all()
    
    return render_template('receipts/list.html', chama=chama, receipts=receipts, member=member)

@receipts_bp.route('/my-receipts')
@login_required
def my_receipts():
    """View user's receipts across all chamas"""
    receipts = Receipt.query.filter_by(user_id=current_user.id).order_by(Receipt.generated_at.desc()).all()
    return render_template('receipts/my_receipts.html', receipts=receipts)

@receipts_bp.route('/chama/<int:chama_id>/payment-history')
@login_required
def payment_history(chama_id):
    """View payment history for a chama"""
    chama = Chama.query.get_or_404(chama_id)
    
    # Check if user is a member
    member = ChamaMember.query.filter_by(
        user_id=current_user.id,
        chama_id=chama_id
    ).first()
    
    if not member:
        flash('You are not a member of this chama.', 'error')
        return redirect(url_for('main.dashboard'))
    
    # Get payment history
    if member.role in ['admin', 'treasurer']:
        contributions = Contribution.query.filter_by(chama_id=chama_id).order_by(Contribution.created_at.desc()).all()
    else:
        contributions = Contribution.query.filter_by(
            chama_id=chama_id,
            user_id=current_user.id
        ).order_by(Contribution.created_at.desc()).all()
    
    return render_template('receipts/payment_history.html', chama=chama, contributions=contributions, member=member)

@receipts_bp.route('/chama/<int:chama_id>/payment-history/export')
@login_required
def export_payment_history(chama_id):
    """Export payment history as CSV"""
    chama = Chama.query.get_or_404(chama_id)
    
    # Check if user is a member
    member = ChamaMember.query.filter_by(
        user_id=current_user.id,
        chama_id=chama_id
    ).first()
    
    if not member:
        flash('You are not a member of this chama.', 'error')
        return redirect(url_for('main.dashboard'))
    
    # Get payment history
    if member.role in ['admin', 'treasurer']:
        contributions = Contribution.query.filter_by(chama_id=chama_id).order_by(Contribution.created_at.desc()).all()
    else:
        contributions = Contribution.query.filter_by(
            chama_id=chama_id,
            user_id=current_user.id
        ).order_by(Contribution.created_at.desc()).all()
    
    # Generate CSV
    output = io.StringIO()
    writer = csv.writer(output)
    
    # Write headers
    writer.writerow(['Date', 'Member', 'Amount', 'Type', 'Status', 'Transaction ID'])
    
    # Write data
    for contribution in contributions:
        writer.writerow([
            contribution.created_at.strftime('%Y-%m-%d %H:%M'),
            contribution.user.full_name,
            f'KES {contribution.amount:,.2f}',
            contribution.type.title(),
            contribution.status.title(),
            contribution.transaction_id or 'N/A'
        ])
    
    output.seek(0)
    
    response = make_response(output.getvalue())
    response.headers['Content-Type'] = 'text/csv'
    response.headers['Content-Disposition'] = f'attachment; filename={chama.name}_payment_history.csv'
    
    return response

@receipts_bp.route('/api/generate-receipt', methods=['POST'])
@login_required
def generate_receipt():
    """Generate a receipt for a contribution"""
    data = request.get_json()
    
    contribution_id = data.get('contribution_id')
    if not contribution_id:
        return jsonify({'error': 'Contribution ID is required'}), 400
    
    contribution = Contribution.query.get_or_404(contribution_id)
    
    # Check if user has permission
    if contribution.user_id != current_user.id:
        member = ChamaMember.query.filter_by(
            user_id=current_user.id,
            chama_id=contribution.chama_id
        ).first()
        
        if not member or member.role not in ['admin', 'treasurer']:
            return jsonify({'error': 'Permission denied'}), 403
    
    # Check if receipt already exists
    existing_receipt = Receipt.query.filter_by(
        chama_id=contribution.chama_id,
        user_id=contribution.user_id,
        amount=contribution.amount,
        transaction_id=contribution.transaction_id
    ).first()
    
    if existing_receipt:
        return jsonify({'receipt_id': existing_receipt.id}), 200
    
    # Generate receipt number
    receipt_count = Receipt.query.filter_by(chama_id=contribution.chama_id).count()
    receipt_number = f"{contribution.chama.name[:3].upper()}-{receipt_count + 1:04d}"
    
    # Create receipt
    receipt = Receipt(
        receipt_number=receipt_number,
        chama_id=contribution.chama_id,
        user_id=contribution.user_id,
        amount=contribution.amount,
        payment_type=contribution.type,
        transaction_id=contribution.transaction_id,
        status='confirmed' if contribution.status == 'confirmed' else 'pending'
    )
    
    db.session.add(receipt)
    db.session.commit()
    
    return jsonify({'receipt_id': receipt.id}), 201
